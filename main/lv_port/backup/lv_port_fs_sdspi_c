/**
 * @file lv_port_fs_templ.c
 *
 */

/*Copy this file as "lv_port_fs.c" and set this value to "1" to enable content*/
#if 0

/*********************
 *      INCLUDES
 *********************/
#include "lv_port_fs_sdspi.h"

/* Littlevgl specific */
#ifdef LV_LVGL_H_INCLUDE_SIMPLE
#include "lvgl.h"
#else
#include "lvgl/lvgl.h"
#endif

#include <string.h>
#include <sys/unistd.h>
#include <sys/stat.h>
#include "esp_vfs_fat.h"
#include "sdmmc_cmd.h"
#include "test_fatfs_common.h"

/*********************
 *      DEFINES
 *********************/
#define SD_LETTER '/'

#define SPI_DMA_CHAN SPI_DMA_CH_AUTO
#define MOUNT_POINT  "/" /* "/sdcard" */

/* spi3 */
#define PIN_NUM_CS   GPIO_NUM_4
#define PIN_NUM_MOSI GPIO_NUM_5
#define PIN_NUM_CLK  GPIO_NUM_6
#define PIN_NUM_MISO GPIO_NUM_7

static const char *TAG = "sdspi";

/**********************
 *      TYPEDEFS
 **********************/

/**********************
 *  STATIC PROTOTYPES
 **********************/
static void fs_init(void);

static void       *fs_open(lv_fs_drv_t *drv, const char *path, lv_fs_mode_t mode);
static lv_fs_res_t fs_close(lv_fs_drv_t *drv, void *file_p);
static lv_fs_res_t fs_read(lv_fs_drv_t *drv, void *file_p, void *buf, uint32_t btr, uint32_t *br);
static lv_fs_res_t fs_write(lv_fs_drv_t *drv, void *file_p, const void *buf, uint32_t btw, uint32_t *bw);
static lv_fs_res_t fs_seek(lv_fs_drv_t *drv, void *file_p, uint32_t pos, lv_fs_whence_t whence);
static lv_fs_res_t fs_size(lv_fs_drv_t *drv, void *file_p, uint32_t *size_p);
static lv_fs_res_t fs_tell(lv_fs_drv_t *drv, void *file_p, uint32_t *pos_p);

static void       *fs_dir_open(lv_fs_drv_t *drv, const char *path);
static lv_fs_res_t fs_dir_read(lv_fs_drv_t *drv, void *rddir_p, char *fn);
static lv_fs_res_t fs_dir_close(lv_fs_drv_t *drv, void *rddir_p);

/**********************
 *  STATIC VARIABLES
 **********************/

/**********************
 * GLOBAL PROTOTYPES
 **********************/

/**********************
 *      MACROS
 **********************/

/**********************
 *   GLOBAL FUNCTIONS
 **********************/

sdmmc_card_t *card;
const char    mount_point[] = MOUNT_POINT;
const char   *f_path        = mount_point;

void lv_port_fs_init(void)
{
    /*----------------------------------------------------
     * Initialize your storage device and File System
     * -------------------------------------------------*/
    fs_init();

    /*---------------------------------------------------
     * Register the file system interface in LVGL
     *--------------------------------------------------*/

    /*Add a simple drive to open images*/
    static lv_fs_drv_t fs_drv;
    lv_fs_drv_init(&fs_drv);

    /*Set up fields...*/
    fs_drv.letter   = SD_LETTER;
    fs_drv.open_cb  = fs_open;
    fs_drv.close_cb = fs_close;
    fs_drv.read_cb  = fs_read;
    fs_drv.write_cb = fs_write;
    fs_drv.seek_cb  = fs_seek;
    fs_drv.tell_cb  = fs_tell;

    fs_drv.dir_close_cb = fs_dir_close;
    fs_drv.dir_open_cb  = fs_dir_open;
    fs_drv.dir_read_cb  = fs_dir_read;

    lv_fs_drv_register(&fs_drv);
}

/**********************
 *   STATIC FUNCTIONS
 **********************/

/*Initialize your Storage device and File system.*/
static void fs_init(void)
{
    /*E.g. for FatFS initialize the SD card and FatFS itself*/

    /*You code here*/
    esp_err_t ret;
    /* 设置D3输出高 */
    gpio_config_t io_conf = {
        .intr_type    = GPIO_INTR_DISABLE,
        .mode         = GPIO_MODE_OUTPUT,
        .pin_bit_mask = 1ULL << GPIO_NUM_14,
        .pull_down_en = 0,
        .pull_up_en   = 1,
    };
    gpio_config(&io_conf);
    gpio_set_level(GPIO_NUM_14, 1);

    //安装文件系统的选项。
    //如果format_If_mount_failed设置为true，则SD卡将被分区并格式化，以防装载失败。
    esp_vfs_fat_sdmmc_mount_config_t mount_config = {
#ifdef CONFIG_EXAMPLE_FORMAT_IF_MOUNT_FAILED
        .format_if_mount_failed = true,
#else
        .format_if_mount_failed = false,
#endif  // EXAMPLE_FORMAT_IF_MOUNT_FAILED
        .max_files            = 5,
        .allocation_unit_size = 16 * 1024};
    // sdmmc_card_t *card;
    // const char    mount_point[] = MOUNT_POINT;
    ESP_LOGI(TAG, "Initializing SD card");

    //使用上面定义的设置初始化SD卡并装入FAT文件系统。
    //注：esp_vfs_fat_sdmmc/sdspi_mount是一款集多功能于一体的便利功能。
    //请检查其源代码，并在开发生产应用程序时实现错误恢复。
    ESP_LOGI(TAG, "Using SPI peripheral");

    sdmmc_host_t host = SDSPI_HOST_DEFAULT();
    // host.max_freq_khz = /* 10 * 1000 *//* SDMMC_FREQ_52M *//* SDMMC_FREQ_HIGHSPEED */;

    spi_bus_config_t bus_cfg = {
        .mosi_io_num     = PIN_NUM_MOSI,
        .miso_io_num     = PIN_NUM_MISO,
        .sclk_io_num     = PIN_NUM_CLK,
        .quadwp_io_num   = -1,
        .quadhd_io_num   = -1,
        .max_transfer_sz = 4000,
    };
    ret = spi_bus_initialize(host.slot, &bus_cfg, SPI_DMA_CHAN);
    if (ret != ESP_OK) {
        ESP_LOGE(TAG, "Failed to initialize bus.");
        return;
    }

    //这会在没有卡检测（CD）和写保护（WP）信号的情况下初始化插槽。
    //修改插槽slot_config.gpio_cd and slot_config.gpio_wp，如果你的电路板有这些信号。
    sdspi_device_config_t slot_config = SDSPI_DEVICE_CONFIG_DEFAULT();
    slot_config.gpio_cs               = PIN_NUM_CS;
    slot_config.host_id               = host.slot;

    ESP_LOGI(TAG, "Mounting filesystem");
    ret = esp_vfs_fat_sdspi_mount(mount_point, &host, &slot_config, &mount_config, &card);

    if (ret != ESP_OK) {
        if (ret == ESP_FAIL) {
            ESP_LOGE(TAG, "Failed to mount filesystem. "
                          "If you want the card to be formatted, set the EXAMPLE_FORMAT_IF_MOUNT_FAILED menuconfig option.");
        } else {
            ESP_LOGE(TAG, "Failed to initialize the card (%s). "
                          "Make sure SD card lines have pull-up resistors in place.",
                     esp_err_to_name(ret));
        }
        return;
    }
    ESP_LOGI(TAG, "Filesystem mounted");

    // Card has been initialized, print its properties
    sdmmc_card_print_info(stdout, card);
}

/**
 * Open a file
 * @param drv       pointer to a driver where this function belongs
 * @param path      path to the file beginning with the driver letter (e.g. S:/folder/file.txt)
 * @param mode      read: FS_MODE_RD, write: FS_MODE_WR, both: FS_MODE_RD | FS_MODE_WR
 * @return          a file descriptor or NULL on error
 */
static void *fs_open(lv_fs_drv_t *drv, const char *path, lv_fs_mode_t mode)
{
    // lv_fs_res_t res = LV_FS_RES_NOT_IMP;

    // void * f = NULL;

    // if(mode == LV_FS_MODE_WR)
    // {
    //     /*Open a file for write*/
    //     f = ...         /*Add your code here*/
    // }
    // else if(mode == LV_FS_MODE_RD)
    // {
    //     /*Open a file for read*/
    //     f = ...         /*Add your code here*/
    // }
    // else if(mode == (LV_FS_MODE_WR | LV_FS_MODE_RD))
    // {
    //     /*Open a file for read and write*/
    //     f = ...         /*Add your code here*/
    // }

    // return f;

    // 打开文件
    (void)drv;
    const char *flags = "";
    if (mode == LV_FS_MODE_WR)
        flags = "wb";
    else if (mode == LV_FS_MODE_RD)
        flags = "rb";
    else if (mode == (LV_FS_MODE_WR | LV_FS_MODE_RD))
        flags = "rb+";

    // sprintf(f_path, "/sdcard/%s", path);
    sprintf(drv, "/%s", path);

    file_t f = fopen(f_path, flags);
    if (NULL == f) {
        return LV_FS_RES_NOT_EX;
    }
    fseek(f, 0, SEEK_SET);

    /* 'file_p' 是指向文件描述符的指针，我们需要在这里存储我们的文件描述符*/
    file_t *fp = file_p;
    *fp        = f;
    return LV_FS_RES_OK;
}

/**
 * Close an opened file
 * @param drv       pointer to a driver where this function belongs
 * @param file_p    pointer to a file_t variable. (opened with fs_open)
 * @return          LV_FS_RES_OK: no error or  any error from @lv_fs_res_t enum
 */
static lv_fs_res_t fs_close(lv_fs_drv_t *drv, void *file_p)
{
    // lv_fs_res_t res = LV_FS_RES_NOT_IMP;

    // /*Add your code here*/

    // return res;

    // 关闭文件
    (void)drv;            /*Unused*/
    file_t *fp = file_p;  // 取出文件操作句柄
    if (NULL == fp) {
        ESP_LOGE(TAG, "NULL file pointer");
        return LV_FS_RES_NOT_EX;
    }
    if (EOF == fclose(fp)) {
        ESP_LOGE(TAG, "Failed close file pointer");
        return LV_FS_RES_NOT_EX;
    }
    return LV_FS_RES_OK;
}

/**
 * Read data from an opened file
 * @param drv       pointer to a driver where this function belongs
 * @param file_p    pointer to a file_t variable.
 * @param buf       pointer to a memory block where to store the read data
 * @param btr       number of Bytes To Read
 * @param br        the real number of read bytes (Byte Read)
 * @return          LV_FS_RES_OK: no error or  any error from @lv_fs_res_t enum
 */
static lv_fs_res_t fs_read(lv_fs_drv_t *drv, void *file_p, void *buf, uint32_t btr, uint32_t *br)
{
    // lv_fs_res_t res = LV_FS_RES_NOT_IMP;
    // /*Add your code here*/
    // return res;

    // 读取文件
    (void)drv;            /*Unused*/
    file_t *fp = file_p;  // 取出文件操作句柄
    *br        = fread(buf, 1, btr, (FILE *)file_p);
    return LV_FS_RES_OK;
}

/**
 * Write into a file
 * @param drv       pointer to a driver where this function belongs
 * @param file_p    pointer to a file_t variable
 * @param buf       pointer to a buffer with the bytes to write
 * @param btr       Bytes To Write
 * @param br        the number of real written bytes (Bytes Written). NULL if unused.
 * @return          LV_FS_RES_OK: no error or  any error from @lv_fs_res_t enum
 */
static lv_fs_res_t fs_write(lv_fs_drv_t *drv, void *file_p, const void *buf, uint32_t btw, uint32_t *bw)
{
    // lv_fs_res_t res = LV_FS_RES_NOT_IMP;
    // /*Add your code here*/
    // return res;

    // 操作文件写入数据
    (void)drv;            /*Unused*/
    file_t *fp = file_p;  // 取出文件操作句柄
    *bw        = fwrite(buf, 1, btw, (FILE *)file_p);
    return LV_FS_RES_OK;
}

/**
 * Set the read write pointer. Also expand the file size if necessary.
 * @param drv       pointer to a driver where this function belongs
 * @param file_p    pointer to a file_t variable. (opened with fs_open )
 * @param pos       the new position of read write pointer
 * @param whence    tells from where to interpret the `pos`. See @lv_fs_whence_t
 * @return          LV_FS_RES_OK: no error or  any error from @lv_fs_res_t enum
 */
static lv_fs_res_t fs_seek(lv_fs_drv_t *drv, void *file_p, uint32_t pos, lv_fs_whence_t whence)
{
    // lv_fs_res_t res = LV_FS_RES_NOT_IMP;
    // /*Add your code here*/
    // return res;

    // 设置文件操作指针偏移
    (void)drv; /*Unused*/
    fseek((FILE *)file_p, pos, SEEK_SET);
    return LV_FS_RES_OK;
}
/**
 * Give the position of the read write pointer
 * @param drv       pointer to a driver where this function belongs
 * @param file_p    pointer to a file_t variable.
 * @param pos_p     pointer to to store the result
 * @return          LV_FS_RES_OK: no error or  any error from @lv_fs_res_t enum
 */
static lv_fs_res_t fs_tell(lv_fs_drv_t *drv, void *file_p, uint32_t *pos_p)
{
    // lv_fs_res_t res = LV_FS_RES_NOT_IMP;
    // /*Add your code here*/
    // return res;

    // 获取文件当前操作指针位置
    (void)drv; /*Unused*/
    *pos_p = ftell((FILE *)file_p);
    return LV_FS_RES_OK;
}

/**
 * Initialize a 'lv_fs_dir_t' variable for directory reading
 * @param drv       pointer to a driver where this function belongs
 * @param path      path to a directory
 * @return          pointer to the directory read descriptor or NULL on error
 */
static void *fs_dir_open(lv_fs_drv_t *drv, const char *path)
{
    // void * dir = NULL;
    // /*Add your code here*/
    // dir = ...           /*Add your code here*/
    // return dir;

    dir_t file_dir = NULL;
    // file_dir = opendir("/sdcard/");
    (void)dir_p;
    (void)drv; /*Unused*/
    char *pathbuf = lv_mem_alloc(128);
    sprintf(pathbuf, "/sdcard/%s", path);
    printf("fs_dir_open   %s\r\n", pathbuf);
    file_dir = opendir(pathbuf);
    if (NULL == file_dir) {
        lv_mem_free(pathbuf);
        return LV_FS_RES_FS_ERR;
    }
    lv_mem_free(pathbuf);
    /* 'file_p' 是指向文件描述符的指针，我们需要在这里存储我们的文件描述符*/
    dir_t *fd = dir_p;
    *fd       = file_dir;
    return LV_FS_RES_OK;
}

/**
 * Read the next filename form a directory.
 * The name of the directories will begin with '/'
 * @param drv       pointer to a driver where this function belongs
 * @param rddir_p   pointer to an initialized 'lv_fs_dir_t' variable
 * @param fn        pointer to a buffer to store the filename
 * @return          LV_FS_RES_OK: no error or  any error from @lv_fs_res_t enum
 */
static lv_fs_res_t fs_dir_read(lv_fs_drv_t *drv, void *rddir_p, char *fn)
{
    // lv_fs_res_t res = LV_FS_RES_NOT_IMP;
    // /*Add your code here*/
    // return res;
    struct dirent *entry;
    dir_t         *mdir_p = dir_p;
    do {
        entry = readdir(*mdir_p);
        if (entry) {
            if (entry->d_type == DT_DIR)
                sprintf(fn, "/%s", entry->d_name);
            else
                strcpy(fn, entry->d_name);
        } else {
            strcpy(fn, "");
        }
    } while (strcmp(fn, "/.") == 0 || strcmp(fn, "/..") == 0);

    return LV_FS_RES_OK;
}

/**
 * Close the directory reading
 * @param drv       pointer to a driver where this function belongs
 * @param rddir_p   pointer to an initialized 'lv_fs_dir_t' variable
 * @return          LV_FS_RES_OK: no error or  any error from @lv_fs_res_t enum
 */
static lv_fs_res_t fs_dir_close(lv_fs_drv_t *drv, void *rddir_p)
{
    // lv_fs_res_t res = LV_FS_RES_NOT_IMP;
    // /*Add your code here*/
    // return res;
    (void)drv; /*Unused*/
    closedir(dir_p);
    return LV_FS_RES_OK;
}

#else /*Enable this file at the top*/

/*This dummy typedef exists purely to silence -Wpedantic.*/
typedef int keep_pedantic_happy;
#endif
